//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Roboasset
{
    [Serializable]
    public class ControlModeServiceRequest : Message
    {
        public const string k_RosMessageName = "roboasset_msgs/ControlModeService";
        public override string RosMessageName => k_RosMessageName;

        //  Change the control mode of the robot
        //  More info at https://github.com/roboticslab-uc3m/dual-iiwa-control/blob/main/dual_iiwa_control/robot_controller.py
        //  modes are:
        //  - 0 : Gravity Compensation
        //  - 1 : Torque Control
        //  - 3 : Wrench Control
        //  - 4 : Joint Impedance Control
        //  - 5 : Cartesian Impedance Control
        //  - 6 : Cartesian Impedance From Joint Positions
        //  - 7 : Cartesian gravity compensation
        //  the integer representing the control mode
        public sbyte control_mode;
        //  a string with the encoded options
        public string options;

        public ControlModeServiceRequest()
        {
            this.control_mode = 0;
            this.options = "";
        }

        public ControlModeServiceRequest(sbyte control_mode, string options)
        {
            this.control_mode = control_mode;
            this.options = options;
        }

        public static ControlModeServiceRequest Deserialize(MessageDeserializer deserializer) => new ControlModeServiceRequest(deserializer);

        private ControlModeServiceRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.control_mode);
            deserializer.Read(out this.options);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.control_mode);
            serializer.Write(this.options);
        }

        public override string ToString()
        {
            return "ControlModeServiceRequest: " +
            "\ncontrol_mode: " + control_mode.ToString() +
            "\noptions: " + options.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
